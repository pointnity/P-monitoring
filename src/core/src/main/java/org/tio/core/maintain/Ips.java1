package org.tio.core.maintain;

import java.io.Serializable;
import java.util.Collection;
import java.util.concurrent.ConcurrentMap;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.tio.core.cache.IpStatRemovalListener;
import org.tio.core.stat.IpStat;
import org.tio.utils.json.Json;
import org.tio.utils.cache.guava.GuavaCache;
import org.tio.utils.time.Time;

/**
 *
 * @author tanyaowu
 *  
 */
public class Ips {
	private static Logger log = LoggerFactory.getLogger(Ips.class);

	private String id;

	private final static String CACHE_NAME = "TIO_IP_STAT";
	private final static Long timeToLiveSeconds = null;
	private final static Long timeToIdleSeconds = Time.DAY_1;

	private String cacheName = null;
	private GuavaCache cache = null;

	@SuppressWarnings("unchecked")
	public Ips(String id) {
		this.id = id;
		this.cacheName = CACHE_NAME + this.id;
		this.cache = GuavaCache.register(this.cacheName, timeToLiveSeconds, timeToIdleSeconds, new IpStatRemovalListener());
	}

	/**
	 * Gets the ipstat based on IP, if it does not exist in the cache, creates
	 * @param ip
	 * @return
	 * @author: tanyaowu
	 */
	public IpStat get(String ip) {
		return get(ip, true);
	}

	/**
	 * Gets ipstat based on IP, if not present in the cache, determines whether to create the value based on the Forcecreate
	 * @param ip
	 * @param forceCreate
	 * @return
	 * @author: tanyaowu
	 */
